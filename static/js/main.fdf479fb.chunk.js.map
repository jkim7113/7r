{"version":3,"sources":["components/PartOfSpeeches.js","components/Defnitions.js","components/Examples.js","components/Words.js","Inputs.js","App.js","index.js"],"names":["PartOfSpeeches","partOfSpeech","className","Definitions","definition","Examples","example","Words","history","match","location","useEffect","Array","prototype","slice","call","document","querySelectorAll","map","word","addEventListener","allWordDefs","allWordClasses","allWordExamples","i","length","style","color","wordClass","classList","wordDefs","undefined","state","params","wordInfo","currentWord","index","definitions","currentDef","currentEx","display","replace","Inputs","target","isRequested","errorMsg","a","fetch","this","res","json","data","meanings","setState","console","error","props","push","pathname","autoComplete","id","type","size","form","querySelector","e","preventDefault","url","value","toLowerCase","loadMeaning","React","Component","App","path","exact","component","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.fdf479fb.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction PartOfSpeeches({partOfSpeech}) {\r\n    return (\r\n        <span className={`partOfSpeech ${partOfSpeech}`}>{partOfSpeech}</span>\r\n    );\r\n\r\n}\r\n\r\nexport {PartOfSpeeches};","import React from 'react';\r\n\r\nfunction Definitions({definition,partOfSpeech}) {\r\n    return(\r\n    <li className={`definitions ${partOfSpeech}`}>{definition}</li>\r\n    );\r\n}\r\n\r\nexport {Definitions}","import React from 'react';\r\n\r\nfunction Examples({partOfSpeech, example}){\r\n    return (\r\n        <li className={`examples ${partOfSpeech}`}>{example}</li>\r\n    );\r\n}\r\n\r\nexport {Examples}","import React, { useEffect } from 'react';\r\nimport { Redirect } from 'react-router';\r\nimport { PartOfSpeeches } from './PartOfSpeeches.js';\r\nimport { Definitions } from './Defnitions.js';\r\nimport { Examples } from './Examples.js';\r\nimport './Words.css';\r\n\r\nfunction Words({history, match, location}){\r\n    \r\n    useEffect(()=>{\r\n\r\n      var partOfSpeechesArray = Array.prototype.slice.call(document.querySelectorAll('.partOfSpeech'));\r\n    \r\n        partOfSpeechesArray.map((word)=>{\r\n          word.addEventListener('click',()=>{\r\n    \r\n            var allWordDefs= document.querySelectorAll('.definitions');\r\n            var allWordClasses = document.querySelectorAll('.partOfSpeech');\r\n            var allWordExamples = document.querySelectorAll('.examples');\r\n    \r\n            for(var i=0;i<allWordDefs.length;i++){\r\n              allWordDefs[i].style.color = '#9baec8';\r\n            }\r\n            for(var i=0;i<allWordClasses.length;i++){\r\n              allWordClasses[i].style.color = '#9baec8';\r\n            }\r\n            for(var i=0;i<allWordExamples.length;i++){\r\n              allWordExamples[i].style.color = '#9baec8';\r\n            }\r\n    \r\n            var wordClass = word.classList[1];\r\n            var wordDefs = document.querySelectorAll(`.${wordClass}`); \r\n            for(var i=0;i<wordDefs.length;i++){\r\n              wordDefs[i].style.color = 'white';\r\n            }\r\n            \r\n          });\r\n        });\r\n    },[]);\r\n\r\n  if(location.state!==undefined){\r\n    \r\n    const { word } = match.params;\r\n    const { wordInfo } = location.state;\r\n    return(\r\n    <div className='words'>\r\n        <div className='wordCardData'>\r\n        <p className='word'>{word}</p>\r\n        {wordInfo.map((currentWord,index)=>(\r\n          <span key ={index}>\r\n            <PartOfSpeeches partOfSpeech={currentWord.partOfSpeech}/>     \r\n            <span className='divider'>{(index < (wordInfo.length-1))?(' | '):('')}</span>\r\n          </span>  \r\n        )\r\n        )\r\n        }\r\n        <ul>\r\n            {\r\n              wordInfo.map((currentWord)=>(     \r\n                currentWord.definitions.map((currentDef,index)=>(\r\n                 <Definitions key={index} partOfSpeech={currentWord.partOfSpeech} definition={currentDef.definition}/>\r\n              ))\r\n              ))\r\n            }\r\n        </ul>\r\n        <ul>\r\n          {\r\n            wordInfo.map((currentWord)=>(  \r\n              currentWord.definitions.map((currentEx,index)=>(\r\n               (currentEx.example)?(<Examples key={index} partOfSpeech={currentWord.partOfSpeech} example={currentEx.example}/>):(<li key={index} style={{display:'none'}}></li>)\r\n            ))\r\n            ))\r\n          }\r\n        </ul>\r\n\r\n        </div>\r\n        </div>\r\n    );\r\n    }else{\r\n      history.replace('/');\r\n      return false;\r\n    }\r\n\r\n}\r\n\r\nexport {Words}\r\n","import React from 'react';\r\nimport { Words } from './components/Words.js';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Inputs extends React.Component{\r\n    \r\n    state = {\r\n        wordInfo : [],\r\n        target : '',\r\n        isRequested : false,\r\n        word : '',\r\n        errorMsg : false\r\n      }\r\n    \r\n      async loadMeaning(){\r\n        try{\r\n          var res = await fetch(this.state.target);\r\n          var data = await res.json();\r\n          \r\n          if(data[0].meanings.length > 0){\r\n            var meanings = data[0];\r\n          }\r\n          else{\r\n            var meanings = data[1];\r\n          }\r\n          this.setState({wordInfo:meanings.meanings, isRequested:true, word:meanings.word});\r\n     \r\n        }\r\n        catch{\r\n          this.setState({isRequested:false, errorMsg:true},()=>{\r\n              console.error('An unexpected error occured');\r\n          });\r\n        }\r\n    \r\n      } \r\n    \r\n        /*loadMeaning(){\r\n          return new Promise((resolve,reject)=>{\r\n            resolve(fetch(this.state.target))\r\n          });\r\n        }*/\r\n      render(){\r\n    \r\n        return(<div>\r\n          {this.state.isRequested ? (\r\n            this.props.history.push({pathname:`/${this.state.word}`, state: this.state})\r\n          ):(\r\n            <div className='cards'>\r\n            <div className='inputCardData'>\r\n            <p className='announcement'>Type the word to search</p>\r\n            <form>\r\n                <input autoComplete='off' id='textBox' type='text' size='30'></input>\r\n            </form>\r\n            <p className='errorMsg'>No words found</p>\r\n            </div>\r\n            </div>\r\n          ) }\r\n        </div>\r\n        );\r\n      }\r\n    \r\n      componentDidMount(){\r\n\r\n        const form = document.querySelector('form');\r\n        const errorMsg = document.querySelector('.errorMsg'); \r\n        \r\n        form.addEventListener('submit',(e)=>{\r\n          e.preventDefault();\r\n          var inputValue = document.querySelector('input').value;\r\n          var url = 'https://api.dictionaryapi.dev/api/v2/entries/en_US/'+inputValue.toLowerCase();\r\n    \r\n          this.setState({target:url},async()=>{\r\n            await this.loadMeaning();\r\n            /*await this.loadMeaning().then((res)=>{\r\n              return res = res.json();\r\n          }\r\n          ).then((res)=>{\r\n            if(data[0].meanings.length > 0){\r\n              var meanings = data[0];\r\n            }\r\n            else{\r\n              var meanings = data[1];\r\n            }\r\n            this.setState({wordInfo:meanings.meanings, isRequested:true, word:meanings.word});\r\n          });*/\r\n            if(this.state.errorMsg === true){\r\n              errorMsg.style.display = 'inline';\r\n            }\r\n            \r\n          });\r\n          });\r\n      }\r\n\r\n}\r\n\r\nexport default Inputs;","import React from 'react';\r\nimport { HashRouter, Route } from 'react-router-dom';\r\nimport './App.css';\r\nimport {Words} from './components/Words.js';\r\nimport Inputs from './Inputs';\r\n\r\nfunction App(){\r\n    return(\r\n        <HashRouter>\r\n            <Route path='/' exact={true} component={Inputs}/>\r\n            <Route path='/:word' exact={true} component={Words}/>\r\n        </HashRouter>\r\n    );\r\n}\r\n\r\nexport {App}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}